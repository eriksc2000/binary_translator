class BinaryTranslator
  attr_reader :alpha_to_binary
  
  def initialize
    @alpha_to_binary = {
      "a" => "000001",
      "b" => "000010",
      "c" => "000011",
      "d" => "000100",
      "e" => "000101",
      "f" => "000110",
      "g" => "000111",
      "h" => "001000",
      "i" => "001001",
      "j" => "001010",
      "k" => "001011",
      "l" => "001100",
      "m" => "001101",
      "n" => "001110",
      "o" => "001111",
      "p" => "010000",
      "q" => "010001",
      "r" => "010010",
      "s" => "010011",
      "t" => "010100",
      "u" => "010101",
      "v" => "010110",
      "w" => "010111",
      "x" => "011000",
      "y" => "011001",
      "z" => "011010",
      "A" => "000001",
      "B" => "000010",
      "C" => "000011",
      "D" => "000100",
      "E" => "000101",
      "F" => "000110",
      "G" => "000111",
      "H" => "001000",
      "I" => "001001",
      "J" => "001010",
      "K" => "001011",
      "L" => "001100",
      "M" => "001101",
      "N" => "001110",
      "O" => "001111",
      "P" => "010000",
      "Q" => "010001",
      "R" => "010010",
      "S" => "010011",
      "T" => "010100",
      "U" => "010101",
      "V" => "010110",
      "W" => "010111",
      "X" => "011000",
      "Y" => "011001",
      "Z" => "011010", 
      "" => "00000",
      "!" => "",
      "@" => "",
      "{" => "",
      "$" => "",
      "#" => "",
      "%" => "",
      "^" => "",
      "&" => "",
      "*" => "",
      "(" => "",
      ")" => "",
      "}" => ""
    }
  end
  
  def translate(key)
   alpha_to_binary[key]
  end   
  
  # def translate(key)
  #   alpha_to_binary.each do |key, value|
  #     alpha_to_binary[value].join
  #   end 
  # end 
  # 
  
end
